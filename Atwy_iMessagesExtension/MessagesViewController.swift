//
//  MessagesViewController.swift
//  Atwy_iMessagesExtension
//
//  Created by Antoine Bollengier on 14.01.23.
//

// I forgot, you have to add `child.view.translatesAutoresizingMaskIntoConstraints = false` after declaring child.

import UIKit
import Messages
import SwiftUI

@objc(MessagesViewController)

class MessagesViewController: MSMessagesAppViewController {

    @objc func sendMessage() {
        if let conversation = activeConversation {
            let message = MSMessage(session: MSSession())
            let layout = MSMessageTemplateLayout()

            layout.caption = messageToSendModel.currentMessage.title
            if let imageData = messageToSendModel.currentMessage.image {
                layout.image = UIImage(data: imageData)
            } else {
                layout.image = UIImage(systemName: "star")
            }

            message.layout = layout
            message.url = messageToSendModel.currentMessage.url

            print(messageToSendModel.currentMessage.url)
            conversation.insert(message)
        } else {
            print("Conversation not defined")
        }
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        reloadViews()
        NotificationCenter.default.addObserver(self, selector: #selector(sendMessage), name: Notification.Name("SendMessage"), object: nil)
    }

    // MARK: - Conversation Handling

    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.

        // Use this method to configure the extension and restore previously stored state.
    }

    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.

        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }

    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.

        // Use this method to trigger UI updates in response to the message.
    }

    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }

    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.

        // Use this to clean up state related to the deleted message.
    }

    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        super.willTransition(to: presentationStyle)
        // Called before the extension transitions to a new presentation style.

        // Use this method to prepare for the change in presentation style.
    }

    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        super.didTransition(to: presentationStyle)
        // Called after the extension transitions to a new presentation style.

        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

    private func reloadViews() {
        let child = UIHostingController(rootView: MainView())
        child.view.translatesAutoresizingMaskIntoConstraints = false
        self.view.addSubview(child.view)

        let constraints = [
            child.view.topAnchor.constraint(equalTo: view.topAnchor),
            child.view.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            child.view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            child.view.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            child.view.widthAnchor.constraint(equalTo: view.widthAnchor),
            child.view.heightAnchor.constraint(equalTo: view.heightAnchor)
        ]
        view.addConstraints(constraints)
    }
}
